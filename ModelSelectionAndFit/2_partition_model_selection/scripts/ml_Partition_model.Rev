
###### Partitioning By Gene #######

### Defining file names and reading in data

filenames <- v("data/sim_locus1.nex", "data/sim_locus2.nex", "data/sim_locus3.nex", "data/sim_locus4.nex")

for (i in 1:4){
   data[i] = readDiscreteCharacterData(filenames[i])
}

n_data_subsets <- 3

#for partition model 1234
#analysis_name = "model1"
#data_partition[1] = concatenate(data[1],data[2],data[3],data[4])


#for partition model 12,34
analysis_name = "model2"
data_partition[1] = data[1]
data_partition[2] = data[2]
data_partition[3] = concatenate(data[3],data[4])

# Get some useful variables from the data. We need these later on.
n_species <- data[1].ntaxa()
n_branches <- 2 * n_species - 3
taxa <- data[1].taxa()

mvi = 0
mni = 0


#######################
# Substitution Models #
#######################

#### specify separate GTR+G+I substitution models across sites ###

for (i in 1:n_data_subsets) {
  er_prior[i] <- v(1,1,1,1,1,1)
  er[i] ~ dnDirichlet(er_prior[i])
  moves[++mvi] = mvBetaSimplex(er[i], alpha=10, tune=true, weight=3)
}

for (i in 1:n_data_subsets) {
  pi_prior[i] <- v(1,1,1,1)
  pi[i] ~ dnDirichlet(pi_prior[i])
  moves[++mvi] = mvBetaSimplex(pi[i], alpha=10, tune=true, weight=2)
}


#### create deterministic variables for the rate matrices ####
for (i in 1:n_data_subsets) {
  Q[i] := fnGTR(er[i],pi[i])
}


#############################
# Among Site Rate Variation #
#############################

for (i in 1:n_data_subsets) {
    alpha_prior_mean[i] <- ln(2.0)
    alpha_prior_sd[i] <- 0.587405
    alpha[i] ~ dnLognormal( alpha_prior_mean[i], alpha_prior_sd[i] )
    gamma_rates[i] := fnDiscretizeGamma( alpha[i], alpha[i], 4, false )
    moves[++mvi] = mvScale(alpha[i],weight=2)
}

for (i in 1:n_data_subsets) {
  pinvar[i] ~ dnBeta(1,1)
  moves[++mvi] = mvScale(pinvar[i], lambda=0.1, tune=true, weight=2.0)
  moves[++mvi] = mvSlide(pinvar[i], delta=0.1, tune=true, weight=2.0)
}

part_rate_mult ~ dnDirichlet( rep(1.0, n_data_subsets) )
moves[++mvi] = mvBetaSimplex(part_rate_mult, alpha=1.0, tune=true, weight=n_data_subsets)
moves[++mvi] = mvDirichletSimplex(part_rate_mult, alpha=1.0, tune=true, weight=2.0)

for (i in 1:n_data_subsets) {
    part_rate[i] := part_rate_mult[i] * n_data_subsets
}


##############
# Tree model #
##############

out_group = clade("Galago_senegalensis")
# Prior distribution on the tree topology	
topology ~ dnUniformTopology(taxa, outgroup=out_group)
moves[++mvi] = mvNNI(topology, weight=5.0)
moves[++mvi] = mvSPR(topology, weight=1.0)

# Branch length prior
for (i in 1:n_branches) {
    bl[i] ~ dnExponential(10.0)
	moves[++mvi] = mvScale(bl[i])
}

TL := sum(bl)
	
psi := treeAssembly(topology, bl)


###################
# PhyloCTMC Model #
###################

for (i in 1:n_data_subsets) {
  phyloSeq[i] ~ dnPhyloCTMC(tree=psi, Q=Q[i], branchRates=part_rate_mult[i], siteRates=
     gamma_rates[i], pInv=pinvar[i], type="DNA")
  phyloSeq[i].clamp(data_partition[i])
}

############
# Analysis #
############

mymodel = model(psi)

# add monitors
monitors[++mni] = mnScreen(TL, printgen=1000)
monitors[++mni] = mnFile(psi, filename="output_"+ analysis_name + "/PS_true.trees", printgen=10)
monitors[++mni] = mnModel(filename="output_"+ analysis_name + "/PS_true.log",printgen=10)

pow_p = powerPosterior(mymodel, moves, monitors, "output_"+ analysis_name + "/model_true.out", cats=50)
pow_p.burnin(generations=5000,tuningInterval=200)
pow_p.run(generations=2000)

ss = steppingStoneSampler(file="output_"+ analysis_name + "/model_true.out", powerColumnName="power", likelihoodColumnName="likelihood")
ss.marginal()

ps = pathSampler(file="output_"+ analysis_name + "/model_true.out", powerColumnName="power",likelihoodColumnName="likelihood")
ps.marginal()

# you may want to quit RevBayes now
#q()

